"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.luaLspExists = exports.luaLspCommand = exports.installLuaLsp = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const coc_nvim_1 = require("coc.nvim");
const config_1 = require("./config");
const tools_1 = require("./tools");
const luaLspDir = "alloyed-lua-lsp";
function installLuaLsp(force = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!force && (yield luaLspExists())) {
            return;
        }
        if (!(yield tools_1.commandExists("luarocks"))) {
            coc_nvim_1.workspace.showMessage(`"luarocks" needs to be installed: https://luarocks.org/#quick-start`, "error");
            return;
        }
        yield tools_1.showInstallStatus("Alloyed/lua-lsp", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const baseDir = yield config_1.configDir(luaLspDir);
            let installCmd = `luarocks install --tree ${baseDir} --server=http://luarocks.org/dev lua-lsp`;
            const luaVersion = config_1.getConfig().version;
            if (luaVersion) {
                installCmd += ` --lua-version=${luaVersion}`;
            }
            yield coc_nvim_1.workspace.runTerminalCommand(installCmd);
        }));
    });
}
exports.installLuaLsp = installLuaLsp;
function luaLspCommand() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const baseDir = yield config_1.configDir(luaLspDir);
        // binary installed by luarocks under Windows has extension '.bat'
        const bin = process.platform === "win32" ? "lua-lsp.bat" : "lua-lsp";
        return path_1.default.join(baseDir, "bin", bin);
    });
}
exports.luaLspCommand = luaLspCommand;
function luaLspExists() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const bin = yield luaLspCommand();
        return new Promise((resolve) => fs_1.default.open(bin, "r", (err) => resolve(err === null)));
    });
}
exports.luaLspExists = luaLspExists;
//# sourceMappingURL=alloyed-lua-lsp.js.map