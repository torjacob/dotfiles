"use strict";
// https://githb.com/neovim/nvim-lspconfi/blob/e38ff05afc3ad5d4fa8b24b4b0619429125582de/la/nvim_lsp/sumneko_lua.lua
Object.defineProperty(exports, "__esModule", { value: true });
exports.osEnv = exports.install = void 0;
const tslib_1 = require("tslib");
const crypto = tslib_1.__importStar(require("crypto"));
const fs = tslib_1.__importStar(require("fs"));
const https = tslib_1.__importStar(require("https"));
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const tar = tslib_1.__importStar(require("tar"));
const fsp = fs.promises;
const osPlatform = os.platform();
const tmpBaseDir = os.tmpdir();
const { join } = path;
function install(dir) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { tarFile } = osEnv();
        yield downloadTar(`https://github.com/josa42/coc-lua-binaries/releases/download/latest/${tarFile}`, dir);
    });
}
exports.install = install;
function downloadTar(sourceUrl, targetPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const dir = yield mkTmpDir(sourceUrl);
        const tarTmpPath = join(dir.path, "tmp.tar.gz");
        yield download(sourceUrl, tarTmpPath);
        yield tar.x({ file: tarTmpPath, cwd: targetPath, strip: 1 });
        yield dir.dispose();
    });
}
function mkTmpDir(key) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const hash = crypto.createHash("md5").update(key).digest("hex");
        const dir = join(tmpBaseDir, hash);
        yield fsp.mkdir(dir, { recursive: true });
        return { path: dir, dispose: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return fsp.rmdir(dir, { recursive: true }); }) };
    });
}
function download(sourceUrl, targetPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const file = fs.createWriteStream(targetPath);
        return new Promise((resolve, reject) => {
            const get = (url) => https.get(url, (res) => {
                const { statusCode } = res;
                if (statusCode === 301 || statusCode === 302) {
                    return get(res.headers.location);
                }
                res
                    .on("data", (data) => file.write(data))
                    .on("end", () => (file.end(), setTimeout(() => resolve(), 5)))
                    .on("error", (err) => reject(err));
            });
            return get(sourceUrl);
        });
    });
}
function osEnv() {
    switch (osPlatform) {
        case "darwin":
            return {
                tarFile: "lua-language-server-macos.tar.gz",
                bin: join("bin", "macOS", "lua-language-server"),
            };
        case "linux":
            return {
                tarFile: "lua-language-server-linux.tar.gz",
                bin: join("bin", "Linux", "lua-language-server"),
            };
        case "win32":
            return {
                tarFile: "lua-language-server-windows.tar.gz",
                bin: join("bin", "Windows", "lua-language-server.exe"),
            };
    }
    return { tarFile: "", bin: "" };
}
exports.osEnv = osEnv;
//# sourceMappingURL=installer.js.map