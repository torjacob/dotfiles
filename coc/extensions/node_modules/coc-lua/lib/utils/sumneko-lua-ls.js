"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.luaLsExists = exports.luaLsCommandAndArgs = exports.installLuaLs = exports.checkForUpdate = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const https = tslib_1.__importStar(require("https"));
const coc_nvim_1 = require("coc.nvim");
const config_1 = require("./config");
const installer_1 = require("./installer");
const tools_1 = require("./tools");
const luaLsDir = "sumneko-lua-ls";
const versionURL = "https://github.com/josa42/coc-lua-binaries/releases/download/latest/version.json";
function checkForUpdate(action) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const statusItem = coc_nvim_1.workspace.createStatusBarItem(90, { progress: true });
        statusItem.text = "Check for updates";
        statusItem.show();
        try {
            const rinfo = yield getVersionInfo();
            const linfo = yield getVersionInstalledInfo();
            if (new Date(linfo.date) > new Date(linfo.date)) {
                handleUpdateAction(action);
            }
            else {
                coc_nvim_1.workspace.showMessage(`${JSON.stringify(linfo)} => ${JSON.stringify(rinfo)}`, "more");
            }
        }
        catch (err) {
            coc_nvim_1.workspace.showMessage(JSON.stringify(err), "error");
        }
        statusItem.hide();
    });
}
exports.checkForUpdate = checkForUpdate;
function handleUpdateAction(action) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (action) {
            case "ask":
                if (yield coc_nvim_1.workspace.showPrompt("New version of sumneko/lua-language-server available. Install?")) {
                    installLuaLs(true);
                }
                break;
            case "install":
                installLuaLs(true);
                break;
            case "inform":
                coc_nvim_1.workspace.showMessage('New version of sumneko/lua-language-server available. Run ":CocCommand lua.update"');
                break;
        }
    });
}
function installLuaLs(force = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!force && (yield luaLsExists())) {
            return;
        }
        yield tools_1.showInstallStatus("sumneko/lua-language-server", () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield installer_1.install(yield config_1.configDir(luaLsDir));
        }));
    });
}
exports.installLuaLs = installLuaLs;
function luaLsCommandAndArgs() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const baseDir = yield config_1.configDir(luaLsDir);
        const { bin } = installer_1.osEnv();
        return [path_1.default.join(baseDir, bin), ["-E", path_1.default.join(baseDir, "main.lua")]];
    });
}
exports.luaLsCommandAndArgs = luaLsCommandAndArgs;
function luaLsExists() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [bin] = yield luaLsCommandAndArgs();
        return new Promise((resolve) => fs_1.default.open(bin, "r", (err) => resolve(err === null)));
    });
}
exports.luaLsExists = luaLsExists;
function getVersionInstalledInfo() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const fpath = path_1.default.join(yield config_1.configDir(luaLsDir), "version.json");
            return JSON.parse(yield fs_1.default.promises.readFile(fpath, "utf-8"));
        }
        catch (err) {
            if (err.code !== "ENOENT") {
                coc_nvim_1.workspace.showMessage(JSON.stringify(err), "error");
            }
            return { date: "", version: "", commit: "" };
        }
    });
}
function getVersionInfo() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const get = (url) => https.get(url, (res) => {
                const { statusCode } = res;
                if (statusCode === 301 || statusCode === 302) {
                    return get(res.headers.location);
                }
                let out = "";
                res
                    .on("data", (data) => (out += data))
                    .on("end", () => resolve(JSON.parse(out)))
                    .on("error", (err) => reject(err));
            });
            return get(versionURL);
        });
    });
}
//# sourceMappingURL=sumneko-lua-ls.js.map