"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const alloyed_lua_lsp_1 = require("./utils/alloyed-lua-lsp");
const sumneko_lua_ls_1 = require("./utils/sumneko-lua-ls");
const tools_1 = require("./utils/tools");
const commands_1 = require("./commands");
const config_1 = require("./utils/config");
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        config_1.setStoragePath(context.storagePath);
        const config = config_1.getConfig();
        if (config.enable === false) {
            return;
        }
        if (config.useSumnekoLs && config.checkForUpdates !== "disabled") {
            setTimeout(() => sumneko_lua_ls_1.checkForUpdate(config.checkForUpdates), 0);
        }
        const client = config.useSumnekoLs
            ? yield createClientSumnekoLs(context, config)
            : yield createClientAlloyedLsp(context, config);
        context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client), coc_nvim_1.commands.registerCommand("lua.version", () => commands_1.version()), coc_nvim_1.commands.registerCommand("lua.update", () => tslib_1.__awaiter(this, void 0, void 0, function* () { return commands_1.update(client); })));
    });
}
exports.activate = activate;
// TODO deprecate and remove once sumneko/lua-language-server is stable
function createClientAlloyedLsp(context, config) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const command = config.commandPath || (yield alloyed_lua_lsp_1.luaLspCommand());
        if (!(yield tools_1.commandExists(command))) {
            yield alloyed_lua_lsp_1.installLuaLsp();
        }
        const serverOptions = { command };
        const clientOptions = {
            documentSelector: ["lua"],
        };
        return new coc_nvim_1.LanguageClient("lua", "lua", serverOptions, clientOptions);
    });
}
function createClientSumnekoLs(context, config) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (config.commandPath) {
            coc_nvim_1.workspace.showMessage("[coc-lua] Wrong configuration: Cannot use both lua.commandPath and lua.useSumnekoLs", "warning");
        }
        const [command, args] = yield sumneko_lua_ls_1.luaLsCommandAndArgs();
        if (!(yield tools_1.commandExists(command))) {
            yield sumneko_lua_ls_1.installLuaLs();
        }
        const serverOptions = { command, args };
        const clientOptions = {
            documentSelector: ["lua"],
        };
        return new coc_nvim_1.LanguageClient("lua", "lua", serverOptions, clientOptions);
    });
}
//# sourceMappingURL=extension.js.map